
Lab_3_2_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000c30  00000cc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022e  00800104  00800104  00000cc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000175a  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfc  00000000  00000000  00002542  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4f  00000000  00000000  0000313e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00003b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000593  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001643  00000000  00000000  000043b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000059f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	bd 00       	.word	0x00bd	; ????
  5e:	0e 01       	movw	r0, r28
  60:	17 01       	movw	r2, r14
  62:	20 01       	movw	r4, r0
  64:	29 01       	movw	r4, r18
  66:	32 01       	movw	r6, r4
  68:	3b 01       	movw	r6, r22
  6a:	44 01       	movw	r8, r8
  6c:	4d 01       	movw	r8, r26
  6e:	56 01       	movw	r10, r12

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e3       	ldi	r30, 0x30	; 48
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 33       	cpi	r26, 0x32	; 50
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 ce 02 	call	0x59c	; 0x59c <main>
  a6:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <button>:
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 09 04 	call	0x812	; 0x812 <lock>
  b6:	1f 99       	sbic	0x03, 7	; 3
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <button+0x18>
  ba:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  be:	86 60       	ori	r24, 0x06	; 6
  c0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  c4:	08 95       	ret
  c6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  ca:	80 66       	ori	r24, 0x60	; 96
  cc:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
  d0:	08 95       	ret

000000d2 <blink>:
  d2:	8a e0       	ldi	r24, 0x0A	; 10
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 09 04 	call	0x812	; 0x812 <lock>
  da:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  de:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  e2:	82 31       	cpi	r24, 0x12	; 18
  e4:	2a e7       	ldi	r18, 0x7A	; 122
  e6:	92 07       	cpc	r25, r18
  e8:	49 f0       	breq	.+18     	; 0xfc <blink+0x2a>
  ea:	84 32       	cpi	r24, 0x24	; 36
  ec:	94 4f       	sbci	r25, 0xF4	; 244
  ee:	09 f0       	breq	.+2      	; 0xf2 <blink+0x20>
  f0:	08 95       	ret
  f2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  f6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
  fa:	08 95       	ret
  fc:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 100:	86 60       	ori	r24, 0x06	; 6
 102:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 106:	08 95       	ret

00000108 <__vector_7>:
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 38 04 	call	0x870	; 0x870 <unlock>
 132:	0e 94 e5 03 	call	0x7ca	; 0x7ca <yield>
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <writeChar>:
	return false;
	
}


int writeChar(char ch, int pos){
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
 160:	f0 97       	sbiw	r30, 0x30	; 48
 162:	ea 30       	cpi	r30, 0x0A	; 10
 164:	f1 05       	cpc	r31, r1
 166:	28 f0       	brcs	.+10     	; 0x172 <writeChar+0x1a>
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	default:
		return 2;
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return 1;
	}
	return 0;
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret


int writeChar(char ch, int pos){
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
 172:	e2 5d       	subi	r30, 0xD2	; 210
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__tablejump2__>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
 17e:	e5 e0       	ldi	r30, 0x05	; 5
 180:	f0 e0       	ldi	r31, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 182:	45 e0       	ldi	r20, 0x05	; 5
 184:	50 e0       	ldi	r21, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return 2;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
 18a:	62 30       	cpi	r22, 0x02	; 2
 18c:	71 05       	cpc	r23, r1
 18e:	09 f4       	brne	.+2      	; 0x192 <writeChar+0x3a>
 190:	35 c1       	rjmp	.+618    	; 0x3fc <writeChar+0x2a4>
 192:	0c f4       	brge	.+2      	; 0x196 <writeChar+0x3e>
 194:	94 c0       	rjmp	.+296    	; 0x2be <writeChar+0x166>
 196:	64 30       	cpi	r22, 0x04	; 4
 198:	71 05       	cpc	r23, r1
 19a:	09 f4       	brne	.+2      	; 0x19e <writeChar+0x46>
 19c:	0d c1       	rjmp	.+538    	; 0x3b8 <writeChar+0x260>
 19e:	0c f4       	brge	.+2      	; 0x1a2 <writeChar+0x4a>
 1a0:	d0 c0       	rjmp	.+416    	; 0x342 <writeChar+0x1ea>
 1a2:	65 30       	cpi	r22, 0x05	; 5
 1a4:	71 05       	cpc	r23, r1
 1a6:	09 f0       	breq	.+2      	; 0x1aa <writeChar+0x52>
 1a8:	c7 c0       	rjmp	.+398    	; 0x338 <writeChar+0x1e0>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
 1aa:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 1ae:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
 1b0:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 1b4:	82 95       	swap	r24
 1b6:	92 95       	swap	r25
 1b8:	90 7f       	andi	r25, 0xF0	; 240
 1ba:	98 27       	eor	r25, r24
 1bc:	80 7f       	andi	r24, 0xF0	; 240
 1be:	98 27       	eor	r25, r24
 1c0:	86 2b       	or	r24, r22
 1c2:	87 2b       	or	r24, r23
 1c4:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
 1c8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 1cc:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
 1ce:	42 95       	swap	r20
 1d0:	52 95       	swap	r21
 1d2:	50 7f       	andi	r21, 0xF0	; 240
 1d4:	54 27       	eor	r21, r20
 1d6:	40 7f       	andi	r20, 0xF0	; 240
 1d8:	54 27       	eor	r21, r20
 1da:	48 2b       	or	r20, r24
 1dc:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
 1e0:	40 91 f8 00 	lds	r20, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 1e4:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
 1e6:	cf 01       	movw	r24, r30
 1e8:	82 95       	swap	r24
 1ea:	92 95       	swap	r25
 1ec:	90 7f       	andi	r25, 0xF0	; 240
 1ee:	98 27       	eor	r25, r24
 1f0:	80 7f       	andi	r24, 0xF0	; 240
 1f2:	98 27       	eor	r25, r24
 1f4:	84 2b       	or	r24, r20
 1f6:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
 1fa:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 1fe:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 5:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
 200:	22 95       	swap	r18
 202:	32 95       	swap	r19
 204:	30 7f       	andi	r19, 0xF0	; 240
 206:	32 27       	eor	r19, r18
 208:	20 7f       	andi	r18, 0xF0	; 240
 20a:	32 27       	eor	r19, r18
 20c:	28 2b       	or	r18, r24
 20e:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
	default:
		return 1;
	}
	return 0;
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
 220:	e1 e0       	ldi	r30, 0x01	; 1
 222:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	ae cf       	rjmp	.-164    	; 0x18a <writeChar+0x32>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
 232:	ee e0       	ldi	r30, 0x0E	; 14
 234:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
 23e:	a5 cf       	rjmp	.-182    	; 0x18a <writeChar+0x32>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
 244:	eb e0       	ldi	r30, 0x0B	; 11
 246:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 250:	9c cf       	rjmp	.-200    	; 0x18a <writeChar+0x32>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
 256:	eb e0       	ldi	r30, 0x0B	; 11
 258:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
 25a:	45 e0       	ldi	r20, 0x05	; 5
 25c:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
 262:	93 cf       	rjmp	.-218    	; 0x18a <writeChar+0x32>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
 268:	eb e0       	ldi	r30, 0x0B	; 11
 26a:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
 26c:	44 e0       	ldi	r20, 0x04	; 4
 26e:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 274:	8a cf       	rjmp	.-236    	; 0x18a <writeChar+0x32>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
 27a:	ef e0       	ldi	r30, 0x0F	; 15
 27c:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
 27e:	44 e0       	ldi	r20, 0x04	; 4
 280:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
 286:	81 cf       	rjmp	.-254    	; 0x18a <writeChar+0x32>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
 28c:	e1 e0       	ldi	r30, 0x01	; 1
 28e:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
 298:	78 cf       	rjmp	.-272    	; 0x18a <writeChar+0x32>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
 29e:	ef e0       	ldi	r30, 0x0F	; 15
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 2a2:	45 e0       	ldi	r20, 0x05	; 5
 2a4:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
 2aa:	6f cf       	rjmp	.-290    	; 0x18a <writeChar+0x32>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
 2b0:	eb e0       	ldi	r30, 0x0B	; 11
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
 2b4:	45 e0       	ldi	r20, 0x05	; 5
 2b6:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
 2bc:	66 cf       	rjmp	.-308    	; 0x18a <writeChar+0x32>
	default:
		return 2;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
 2be:	61 15       	cp	r22, r1
 2c0:	71 05       	cpc	r23, r1
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <writeChar+0x16e>
 2c4:	bd c0       	rjmp	.+378    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 2c6:	61 30       	cpi	r22, 0x01	; 1
 2c8:	71 05       	cpc	r23, r1
 2ca:	b1 f5       	brne	.+108    	; 0x338 <writeChar+0x1e0>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
 2cc:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 2d0:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
 2d2:	82 95       	swap	r24
 2d4:	92 95       	swap	r25
 2d6:	90 7f       	andi	r25, 0xF0	; 240
 2d8:	98 27       	eor	r25, r24
 2da:	80 7f       	andi	r24, 0xF0	; 240
 2dc:	98 27       	eor	r25, r24
 2de:	86 2b       	or	r24, r22
 2e0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
 2e4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 2e8:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
 2ea:	42 95       	swap	r20
 2ec:	52 95       	swap	r21
 2ee:	50 7f       	andi	r21, 0xF0	; 240
 2f0:	54 27       	eor	r21, r20
 2f2:	40 7f       	andi	r20, 0xF0	; 240
 2f4:	54 27       	eor	r21, r20
 2f6:	48 2b       	or	r20, r24
 2f8:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
 2fc:	40 91 f6 00 	lds	r20, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 300:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
 302:	cf 01       	movw	r24, r30
 304:	82 95       	swap	r24
 306:	92 95       	swap	r25
 308:	90 7f       	andi	r25, 0xF0	; 240
 30a:	98 27       	eor	r25, r24
 30c:	80 7f       	andi	r24, 0xF0	; 240
 30e:	98 27       	eor	r25, r24
 310:	84 2b       	or	r24, r20
 312:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
 316:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 31a:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
 31c:	22 95       	swap	r18
 31e:	32 95       	swap	r19
 320:	30 7f       	andi	r19, 0xF0	; 240
 322:	32 27       	eor	r19, r18
 324:	20 7f       	andi	r18, 0xF0	; 240
 326:	32 27       	eor	r19, r18
 328:	28 2b       	or	r18, r24
 32a:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 |= writeReg(SCC_X_0, LCDDR1, true);
 342:	70 91 ed 00 	lds	r23, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 346:	7f 70       	andi	r23, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 |= writeReg(SCC_X_0, LCDDR1, true);
 348:	a0 91 ed 00 	lds	r26, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 34c:	82 95       	swap	r24
 34e:	92 95       	swap	r25
 350:	90 7f       	andi	r25, 0xF0	; 240
 352:	98 27       	eor	r25, r24
 354:	80 7f       	andi	r24, 0xF0	; 240
 356:	98 27       	eor	r25, r24
 358:	ec 01       	movw	r28, r24
 35a:	c7 2b       	or	r28, r23
 35c:	be 01       	movw	r22, r28
 35e:	6a 2b       	or	r22, r26
 360:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
 364:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 368:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 |= writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
 36a:	42 95       	swap	r20
 36c:	52 95       	swap	r21
 36e:	50 7f       	andi	r21, 0xF0	; 240
 370:	54 27       	eor	r21, r20
 372:	40 7f       	andi	r20, 0xF0	; 240
 374:	54 27       	eor	r21, r20
 376:	48 2b       	or	r20, r24
 378:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
 37c:	40 91 f7 00 	lds	r20, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 380:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 |= writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
 382:	cf 01       	movw	r24, r30
 384:	82 95       	swap	r24
 386:	92 95       	swap	r25
 388:	90 7f       	andi	r25, 0xF0	; 240
 38a:	98 27       	eor	r25, r24
 38c:	80 7f       	andi	r24, 0xF0	; 240
 38e:	98 27       	eor	r25, r24
 390:	84 2b       	or	r24, r20
 392:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
 396:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
 39a:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 3:
		LCDDR1 |= writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
 39c:	22 95       	swap	r18
 39e:	32 95       	swap	r19
 3a0:	30 7f       	andi	r19, 0xF0	; 240
 3a2:	32 27       	eor	r19, r18
 3a4:	20 7f       	andi	r18, 0xF0	; 240
 3a6:	32 27       	eor	r19, r18
 3a8:	28 2b       	or	r18, r24
 3aa:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
 3b8:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 3bc:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
 3be:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 3c2:	86 2b       	or	r24, r22
 3c4:	87 2b       	or	r24, r23
 3c6:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
 3ca:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 3ce:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
 3d0:	48 2b       	or	r20, r24
 3d2:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
 3d6:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 3da:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
 3dc:	af 01       	movw	r20, r30
 3de:	48 2b       	or	r20, r24
 3e0:	ca 01       	movw	r24, r20
 3e2:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
 3e6:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 3ea:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 4:
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
 3ec:	28 2b       	or	r18, r24
 3ee:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	90 e0       	ldi	r25, 0x00	; 0
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 |= writeReg(SCC_X_0, LCDDR1, false);
 3fc:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 400:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 |= writeReg(SCC_X_0, LCDDR1, false);
 402:	70 91 ed 00 	lds	r23, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 406:	86 2b       	or	r24, r22
 408:	87 2b       	or	r24, r23
 40a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
 40e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 412:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 |= writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
 414:	48 2b       	or	r20, r24
 416:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
 41a:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 41e:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 |= writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
 420:	ef 01       	movw	r28, r30
 422:	c8 2b       	or	r28, r24
 424:	ce 01       	movw	r24, r28
 426:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
 42a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 42e:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 2:
		LCDDR1 |= writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
 430:	28 2b       	or	r18, r24
 432:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
 440:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 444:	60 7f       	andi	r22, 0xF0	; 240
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
 446:	86 2b       	or	r24, r22
 448:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
 44c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 450:	80 7f       	andi	r24, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
 452:	48 2b       	or	r20, r24
 454:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
 458:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 45c:	80 7f       	andi	r24, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
 45e:	af 01       	movw	r20, r30
 460:	48 2b       	or	r20, r24
 462:	ca 01       	movw	r24, r20
 464:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
 468:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
 46c:	80 7f       	andi	r24, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
 46e:	28 2b       	or	r18, r24
 470:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
		break;
	default:
		return 1;
	}
	return 0;
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
}
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <writeLong>:
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
	
}
void writeLong(long i) {
 47e:	8f 92       	push	r8
 480:	9f 92       	push	r9
 482:	af 92       	push	r10
 484:	bf 92       	push	r11
 486:	cf 92       	push	r12
 488:	df 92       	push	r13
 48a:	ef 92       	push	r14
 48c:	ff 92       	push	r15
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	c5 e0       	ldi	r28, 0x05	; 5
 494:	d0 e0       	ldi	r29, 0x00	; 0
	int n = 0;
	while (n < 6) {		// a while loop for getting the first 6 digits of a number.
		int temp = i % 10;
		writeChar((char)temp + '0', 5-n);
 496:	2a e0       	ldi	r18, 0x0A	; 10
 498:	c2 2e       	mov	r12, r18
 49a:	d1 2c       	mov	r13, r1
 49c:	e1 2c       	mov	r14, r1
 49e:	f1 2c       	mov	r15, r1
 4a0:	a7 01       	movw	r20, r14
 4a2:	96 01       	movw	r18, r12
 4a4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__divmodsi4>
 4a8:	49 01       	movw	r8, r18
 4aa:	5a 01       	movw	r10, r20
 4ac:	86 2f       	mov	r24, r22
 4ae:	be 01       	movw	r22, r28
 4b0:	80 5d       	subi	r24, 0xD0	; 208
 4b2:	0e 94 ac 00 	call	0x158	; 0x158 <writeChar>
		i = floor(i / 10);
 4b6:	c5 01       	movw	r24, r10
 4b8:	b4 01       	movw	r22, r8
 4ba:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
 4be:	0e 94 0d 05 	call	0xa1a	; 0xa1a <floor>
 4c2:	0e 94 9a 04 	call	0x934	; 0x934 <__fixsfsi>
 4c6:	21 97       	sbiw	r28, 0x01	; 1
 4c8:	58 f7       	brcc	.-42     	; 0x4a0 <writeLong+0x22>
		n += 1;
	}	
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	ff 90       	pop	r15
 4d0:	ef 90       	pop	r14
 4d2:	df 90       	pop	r13
 4d4:	cf 90       	pop	r12
 4d6:	bf 90       	pop	r11
 4d8:	af 90       	pop	r10
 4da:	9f 90       	pop	r9
 4dc:	8f 90       	pop	r8
 4de:	08 95       	ret

000004e0 <primes>:

void primes() {
 4e0:	4f 92       	push	r4
 4e2:	5f 92       	push	r5
 4e4:	6f 92       	push	r6
 4e6:	7f 92       	push	r7
 4e8:	8f 92       	push	r8
 4ea:	9f 92       	push	r9
 4ec:	af 92       	push	r10
 4ee:	bf 92       	push	r11
 4f0:	cf 92       	push	r12
 4f2:	df 92       	push	r13
 4f4:	ef 92       	push	r14
 4f6:	ff 92       	push	r15
	for(long count=0; count < 50000; count+= 1) {
 4f8:	41 2c       	mov	r4, r1
 4fa:	51 2c       	mov	r5, r1
 4fc:	32 01       	movw	r6, r4
 4fe:	53 01       	movw	r10, r6
 500:	42 01       	movw	r8, r4
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	88 1a       	sub	r8, r24
 506:	98 0a       	sbc	r9, r24
 508:	a8 0a       	sbc	r10, r24
 50a:	b8 0a       	sbc	r11, r24
 50c:	80 e5       	ldi	r24, 0x50	; 80
 50e:	88 16       	cp	r8, r24
 510:	83 ec       	ldi	r24, 0xC3	; 195
 512:	98 06       	cpc	r9, r24
 514:	a1 04       	cpc	r10, r1
 516:	b1 04       	cpc	r11, r1
 518:	a1 f1       	breq	.+104    	; 0x582 <__stack+0x83>
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
 51a:	80 fe       	sbrs	r8, 0
 51c:	28 c0       	rjmp	.+80     	; 0x56e <__stack+0x6f>
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	88 16       	cp	r8, r24
 522:	91 04       	cpc	r9, r1
 524:	a1 04       	cpc	r10, r1
 526:	b1 04       	cpc	r11, r1
 528:	11 f1       	breq	.+68     	; 0x56e <__stack+0x6f>
		if (i - 1 == n) return true;
 52a:	83 e0       	ldi	r24, 0x03	; 3
 52c:	88 16       	cp	r8, r24
 52e:	91 04       	cpc	r9, r1
 530:	a1 04       	cpc	r10, r1
 532:	b1 04       	cpc	r11, r1
 534:	f9 f0       	breq	.+62     	; 0x574 <__stack+0x75>
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	c8 2e       	mov	r12, r24
 53a:	d1 2c       	mov	r13, r1
 53c:	e1 2c       	mov	r14, r1
 53e:	f1 2c       	mov	r15, r1
 540:	0c c0       	rjmp	.+24     	; 0x55a <__stack+0x5b>
 542:	d7 01       	movw	r26, r14
 544:	c6 01       	movw	r24, r12
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	a1 1d       	adc	r26, r1
 54a:	b1 1d       	adc	r27, r1
 54c:	c4 14       	cp	r12, r4
 54e:	d5 04       	cpc	r13, r5
 550:	e6 04       	cpc	r14, r6
 552:	f7 04       	cpc	r15, r7
 554:	79 f0       	breq	.+30     	; 0x574 <__stack+0x75>
 556:	6c 01       	movw	r12, r24
 558:	7d 01       	movw	r14, r26
}


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
 55a:	c5 01       	movw	r24, r10
 55c:	b4 01       	movw	r22, r8
 55e:	a7 01       	movw	r20, r14
 560:	96 01       	movw	r18, r12
 562:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__divmodsi4>
 566:	67 2b       	or	r22, r23
 568:	68 2b       	or	r22, r24
 56a:	69 2b       	or	r22, r25
 56c:	51 f7       	brne	.-44     	; 0x542 <__stack+0x43>
		if (i - 1 == n) return true;
 56e:	24 01       	movw	r4, r8
 570:	35 01       	movw	r6, r10
 572:	c5 cf       	rjmp	.-118    	; 0x4fe <primes+0x1e>
}

void primes() {
	for(long count=0; count < 50000; count+= 1) {
		if (is_prime(count))
			writeLong(count);
 574:	c5 01       	movw	r24, r10
 576:	b4 01       	movw	r22, r8
 578:	0e 94 3f 02 	call	0x47e	; 0x47e <writeLong>


bool is_prime(long i) {
	int n = 2;
	while (i % n != 0 && i > 1){	// uses an inefficient but standard way of looking for primes.
		if (i - 1 == n) return true;
 57c:	24 01       	movw	r4, r8
 57e:	35 01       	movw	r6, r10
 580:	be cf       	rjmp	.-132    	; 0x4fe <primes+0x1e>
void primes() {
	for(long count=0; count < 50000; count+= 1) {
		if (is_prime(count))
			writeLong(count);
	}
}
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	df 90       	pop	r13
 588:	cf 90       	pop	r12
 58a:	bf 90       	pop	r11
 58c:	af 90       	pop	r10
 58e:	9f 90       	pop	r9
 590:	8f 90       	pop	r8
 592:	7f 90       	pop	r7
 594:	6f 90       	pop	r6
 596:	5f 90       	pop	r5
 598:	4f 90       	pop	r4
 59a:	08 95       	ret

0000059c <main>:
}


int main(void)
{
	CLKPR = 0x80;
 59c:	e1 e6       	ldi	r30, 0x61	; 97
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 e8       	ldi	r24, 0x80	; 128
 5a2:	80 83       	st	Z, r24
	CLKPR = 0x00;
 5a4:	10 82       	st	Z, r1
	primes();
}

void LCD_Init(void){

	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
 5a6:	86 e3       	ldi	r24, 0x36	; 54
 5a8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
 5ac:	87 e0       	ldi	r24, 0x07	; 7
 5ae:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
 5b2:	8f e0       	ldi	r24, 0x0F	; 15
 5b4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
 5b8:	80 ec       	ldi	r24, 0xC0	; 192
 5ba:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
 5be:	8d e0       	ldi	r24, 0x0D	; 13
 5c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
{
	CLKPR = 0x80;
	CLKPR = 0x00;
    LCD_Init();

	lock(&bli); lock(&but);
 5c4:	8a e0       	ldi	r24, 0x0A	; 10
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 09 04 	call	0x812	; 0x812 <lock>
 5cc:	86 e0       	ldi	r24, 0x06	; 6
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	0e 94 09 04 	call	0x812	; 0x812 <lock>
	spawn(blink, 1);
 5d4:	61 e0       	ldi	r22, 0x01	; 1
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	89 e6       	ldi	r24, 0x69	; 105
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 1b 03 	call	0x636	; 0x636 <spawn>
	spawn(button, 2);
 5e0:	62 e0       	ldi	r22, 0x02	; 2
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	87 e5       	ldi	r24, 0x57	; 87
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 1b 03 	call	0x636	; 0x636 <spawn>
	primes();
 5ec:	0e 94 70 02 	call	0x4e0	; 0x4e0 <primes>
}
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	08 95       	ret

000005f6 <dispatch>:
		while (1) ;  // not much else to do...
	}
	return p;
}

static void dispatch(thread next) {
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <dispatch+0x6>
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
 600:	9a 83       	std	Y+2, r25	; 0x02
 602:	89 83       	std	Y+1, r24	; 0x01
	if (setjmp(current->context) == 0) {
 604:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 608:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 60c:	06 96       	adiw	r24, 0x06	; 6
 60e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <setjmp>
 612:	89 2b       	or	r24, r25
 614:	29 f0       	breq	.+10     	; 0x620 <dispatch+0x2a>
		current = next;
		longjmp(next->context,1);
	}
}
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret
	return p;
}

static void dispatch(thread next) {
	if (setjmp(current->context) == 0) {
		current = next;
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	9a 81       	ldd	r25, Y+2	; 0x02
 624:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 628:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		longjmp(next->context,1);
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	06 96       	adiw	r24, 0x06	; 6
 632:	0e 94 f5 05 	call	0xbea	; 0xbea <longjmp>

00000636 <spawn>:
	}
}

void spawn(void (* function)(int), int arg) {
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	00 d0       	rcall	.+0      	; 0x63c <spawn+0x6>
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
	thread newp;

	DISABLE();
 640:	f8 94       	cli
	if (!initialized) initialize();
 642:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 646:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 64a:	23 2b       	or	r18, r19
 64c:	d9 f1       	breq	.+118    	; 0x6c4 <spawn+0x8e>
		p->next = m;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 64e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 652:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 656:	3a 83       	std	Y+2, r19	; 0x02
 658:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 65a:	23 2b       	or	r18, r19
 65c:	09 f4       	brne	.+2      	; 0x660 <spawn+0x2a>
 65e:	70 c0       	rjmp	.+224    	; 0x740 <spawn+0x10a>
		*queue = (*queue)->next;
 660:	e9 81       	ldd	r30, Y+1	; 0x01
 662:	fa 81       	ldd	r31, Y+2	; 0x02
 664:	44 81       	ldd	r20, Z+4	; 0x04
 666:	55 81       	ldd	r21, Z+5	; 0x05
 668:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 66c:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

	DISABLE();
	if (!initialized) initialize();

	newp = dequeue(&freeQ);
	newp->function = function;
 670:	91 83       	std	Z+1, r25	; 0x01
 672:	80 83       	st	Z, r24
	newp->arg = arg;
 674:	73 83       	std	Z+3, r23	; 0x03
 676:	62 83       	std	Z+2, r22	; 0x02
	newp->next = NULL;
 678:	15 82       	std	Z+5, r1	; 0x05
 67a:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 67c:	cf 01       	movw	r24, r30
 67e:	06 96       	adiw	r24, 0x06	; 6
 680:	0e 94 d5 05 	call	0xbaa	; 0xbaa <setjmp>
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	09 f4       	brne	.+2      	; 0x68a <spawn+0x54>
 688:	68 c0       	rjmp	.+208    	; 0x75a <spawn+0x124>
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);
 68a:	e9 81       	ldd	r30, Y+1	; 0x01
 68c:	fa 81       	ldd	r31, Y+2	; 0x02
 68e:	36 96       	adiw	r30, 0x06	; 6
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	9a 81       	ldd	r25, Y+2	; 0x02
 694:	87 59       	subi	r24, 0x97	; 151
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	91 8b       	std	Z+17, r25	; 0x11
 69a:	80 8b       	std	Z+16, r24	; 0x10
 69c:	93 8b       	std	Z+19, r25	; 0x13
 69e:	82 8b       	std	Z+18, r24	; 0x12

	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 6a0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <readyQ>
 6a4:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <readyQ+0x1>
 6a8:	30 97       	sbiw	r30, 0x00	; 0
 6aa:	09 f4       	brne	.+2      	; 0x6ae <spawn+0x78>
 6ac:	4a c0       	rjmp	.+148    	; 0x742 <spawn+0x10c>
		*queue = p;
	} else {
		thread q = *queue;
		thread m = q->next; 
 6ae:	04 80       	ldd	r0, Z+4	; 0x04
 6b0:	f5 81       	ldd	r31, Z+5	; 0x05
 6b2:	e0 2d       	mov	r30, r0
		p = q->next;
		p->next = m;
 6b4:	f5 83       	std	Z+5, r31	; 0x05
 6b6:	e4 83       	std	Z+4, r30	; 0x04
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);

	enqueue(newp, &readyQ);
	ENABLE();
 6b8:	78 94       	sei
}
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	08 95       	ret
int initialized = 0;

static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
	threads[i].next = &threads[i+1];
 6c4:	2a ee       	ldi	r18, 0xEA	; 234
 6c6:	31 e0       	ldi	r19, 0x01	; 1
 6c8:	30 93 82 01 	sts	0x0182, r19	; 0x800182 <threads+0x5>
 6cc:	20 93 81 01 	sts	0x0181, r18	; 0x800181 <threads+0x4>
 6d0:	27 e5       	ldi	r18, 0x57	; 87
 6d2:	32 e0       	ldi	r19, 0x02	; 2
 6d4:	30 93 ef 01 	sts	0x01EF, r19	; 0x8001ef <threads+0x72>
 6d8:	20 93 ee 01 	sts	0x01EE, r18	; 0x8001ee <threads+0x71>
 6dc:	24 ec       	ldi	r18, 0xC4	; 196
 6de:	32 e0       	ldi	r19, 0x02	; 2
 6e0:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <threads+0xdf>
 6e4:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <threads+0xde>
	threads[NTHREADS-1].next = NULL;
 6e8:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <threads+0x14c>
 6ec:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <threads+0x14b>


	DDRB |= (1 << DDB7);
 6f0:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= (1 << PB7);
 6f2:	2f 9a       	sbi	0x05, 7	; 5
	MCUCR = (0 << PUD);
 6f4:	15 be       	out	0x35, r1	; 53


	EIMSK |= (1<<PCIF1);
 6f6:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 |= (1<<PCINT15);
 6f8:	ec e6       	ldi	r30, 0x6C	; 108
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	20 81       	ld	r18, Z
 6fe:	20 68       	ori	r18, 0x80	; 128
 700:	20 83       	st	Z, r18
	TCCR1A |= (1 << COM1A1);
 702:	e0 e8       	ldi	r30, 0x80	; 128
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	20 81       	ld	r18, Z
 708:	20 68       	ori	r18, 0x80	; 128
 70a:	20 83       	st	Z, r18
	TIMSK1 |= (1<<OCIE1A);
 70c:	ef e6       	ldi	r30, 0x6F	; 111
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	20 81       	ld	r18, Z
 712:	22 60       	ori	r18, 0x02	; 2
 714:	20 83       	st	Z, r18
	
	OCR1A = 0x1E85;
 716:	25 e8       	ldi	r18, 0x85	; 133
 718:	3e e1       	ldi	r19, 0x1E	; 30
 71a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 71e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	initialized = 1;
 722:	21 e0       	ldi	r18, 0x01	; 1
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 72a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
		p->next = m;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 72e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 732:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 736:	3a 83       	std	Y+2, r19	; 0x02
 738:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 73a:	23 2b       	or	r18, r19
 73c:	09 f0       	breq	.+2      	; 0x740 <spawn+0x10a>
 73e:	90 cf       	rjmp	.-224    	; 0x660 <spawn+0x2a>
 740:	ff cf       	rjmp	.-2      	; 0x740 <spawn+0x10a>
	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
		*queue = p;
 742:	29 81       	ldd	r18, Y+1	; 0x01
 744:	3a 81       	ldd	r19, Y+2	; 0x02
 746:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <readyQ+0x1>
 74a:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <readyQ>
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);

	enqueue(newp, &readyQ);
	ENABLE();
 74e:	78 94       	sei
}
 750:	0f 90       	pop	r0
 752:	0f 90       	pop	r0
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	08 95       	ret
	newp = dequeue(&freeQ);
	newp->function = function;
	newp->arg = arg;
	newp->next = NULL;
	if (setjmp(newp->context) == 1) {
		ENABLE();
 75a:	78 94       	sei
		current->function(current->arg);
 75c:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 760:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 764:	ed 91       	ld	r30, X+
 766:	fc 91       	ld	r31, X
 768:	11 97       	sbiw	r26, 0x01	; 1
 76a:	12 96       	adiw	r26, 0x02	; 2
 76c:	8d 91       	ld	r24, X+
 76e:	9c 91       	ld	r25, X
 770:	13 97       	sbiw	r26, 0x03	; 3
 772:	09 95       	icall
		DISABLE();
 774:	f8 94       	cli
		enqueue(current, &freeQ);
 776:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 77a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>

	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 77e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 782:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 786:	30 97       	sbiw	r30, 0x00	; 0
 788:	a9 f0       	breq	.+42     	; 0x7b4 <spawn+0x17e>
		*queue = p;
	} else {
		thread q = *queue;
		thread m = q->next; 
 78a:	04 80       	ldd	r0, Z+4	; 0x04
 78c:	f5 81       	ldd	r31, Z+5	; 0x05
 78e:	e0 2d       	mov	r30, r0
		p = q->next;
		p->next = m;
 790:	f5 83       	std	Z+5, r31	; 0x05
 792:	e4 83       	std	Z+4, r30	; 0x04
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 794:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 798:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
	if (*queue) {
 79c:	00 97       	sbiw	r24, 0x00	; 0
 79e:	a1 f0       	breq	.+40     	; 0x7c8 <spawn+0x192>
		*queue = (*queue)->next;
 7a0:	fc 01       	movw	r30, r24
 7a2:	24 81       	ldd	r18, Z+4	; 0x04
 7a4:	35 81       	ldd	r19, Z+5	; 0x05
 7a6:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <readyQ+0x1>
 7aa:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <readyQ>
	if (setjmp(newp->context) == 1) {
		ENABLE();
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
 7ae:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <dispatch>
 7b2:	6b cf       	rjmp	.-298    	; 0x68a <spawn+0x54>
	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
		*queue = p;
 7b4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freeQ+0x1>
 7b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freeQ>
		p->next = m;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 7bc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 7c0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
	if (*queue) {
 7c4:	00 97       	sbiw	r24, 0x00	; 0
 7c6:	61 f7       	brne	.-40     	; 0x7a0 <spawn+0x16a>
 7c8:	ff cf       	rjmp	.-2      	; 0x7c8 <spawn+0x192>

000007ca <yield>:
	enqueue(newp, &readyQ);
	ENABLE();
}

void yield(void) {
	DISABLE();
 7ca:	f8 94       	cli

	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 7cc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 7d0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
 7d4:	00 97       	sbiw	r24, 0x00	; 0
 7d6:	91 f0       	breq	.+36     	; 0x7fc <yield+0x32>
		*queue = p;
	} else {
		thread q = *queue;
		thread m = q->next; 
 7d8:	dc 01       	movw	r26, r24
 7da:	14 96       	adiw	r26, 0x04	; 4
 7dc:	ed 91       	ld	r30, X+
 7de:	fc 91       	ld	r31, X
 7e0:	15 97       	sbiw	r26, 0x05	; 5
		p = q->next;
		p->next = m;
 7e2:	f5 83       	std	Z+5, r31	; 0x05
 7e4:	e4 83       	std	Z+4, r30	; 0x04
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
		*queue = (*queue)->next;
 7e6:	fc 01       	movw	r30, r24
 7e8:	24 81       	ldd	r18, Z+4	; 0x04
 7ea:	35 81       	ldd	r19, Z+5	; 0x05
 7ec:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <readyQ+0x1>
 7f0:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current,&readyQ);
	dispatch(dequeue(&readyQ));
 7f4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <dispatch>
	ENABLE();
 7f8:	78 94       	sei
}
 7fa:	08 95       	ret
	ENABLE();
}

void yield(void) {
	DISABLE();
	enqueue(current,&readyQ);
 7fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 800:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
		*queue = p;
 804:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <readyQ+0x1>
 808:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <readyQ>
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
 80c:	00 97       	sbiw	r24, 0x00	; 0
 80e:	59 f7       	brne	.-42     	; 0x7e6 <yield+0x1c>
 810:	ff cf       	rjmp	.-2      	; 0x810 <yield+0x46>

00000812 <lock>:
	enqueue(current,&readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 812:	fc 01       	movw	r30, r24
	DISABLE();
 814:	f8 94       	cli
	if(m->locked == 0) m->locked = 1;
 816:	80 81       	ld	r24, Z
 818:	91 81       	ldd	r25, Z+1	; 0x01
 81a:	89 2b       	or	r24, r25
 81c:	e1 f0       	breq	.+56     	; 0x856 <lock+0x44>

	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 81e:	a2 81       	ldd	r26, Z+2	; 0x02
 820:	b3 81       	ldd	r27, Z+3	; 0x03
 822:	10 97       	sbiw	r26, 0x00	; 0
 824:	f1 f0       	breq	.+60     	; 0x862 <lock+0x50>
		*queue = p;
	} else {
		thread q = *queue;
		thread m = q->next; 
 826:	14 96       	adiw	r26, 0x04	; 4
 828:	ed 91       	ld	r30, X+
 82a:	fc 91       	ld	r31, X
 82c:	15 97       	sbiw	r26, 0x05	; 5
		p = q->next;
		p->next = m;
 82e:	f5 83       	std	Z+5, r31	; 0x05
 830:	e4 83       	std	Z+4, r30	; 0x04
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 832:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 836:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
	if (*queue) {
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	59 f0       	breq	.+22     	; 0x854 <lock+0x42>
		*queue = (*queue)->next;
 83e:	fc 01       	movw	r30, r24
 840:	24 81       	ldd	r18, Z+4	; 0x04
 842:	35 81       	ldd	r19, Z+5	; 0x05
 844:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <readyQ+0x1>
 848:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <readyQ>
void lock(mutex *m) {
	DISABLE();
	if(m->locked == 0) m->locked = 1;
	else {
		enqueue(current,&m->waitQ);
		dispatch(dequeue(&readyQ));
 84c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <dispatch>
	}
	ENABLE();
 850:	78 94       	sei
 852:	08 95       	ret
 854:	ff cf       	rjmp	.-2      	; 0x854 <lock+0x42>
	ENABLE();
}

void lock(mutex *m) {
	DISABLE();
	if(m->locked == 0) m->locked = 1;
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	91 83       	std	Z+1, r25	; 0x01
 85c:	80 83       	st	Z, r24
	else {
		enqueue(current,&m->waitQ);
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 85e:	78 94       	sei
 860:	08 95       	ret
	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
		*queue = p;
 862:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 866:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 86a:	93 83       	std	Z+3, r25	; 0x03
 86c:	82 83       	std	Z+2, r24	; 0x02
 86e:	e1 cf       	rjmp	.-62     	; 0x832 <lock+0x20>

00000870 <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 870:	fc 01       	movw	r30, r24
	DISABLE();
 872:	f8 94       	cli
	if (m->waitQ == NULL){
 874:	82 81       	ldd	r24, Z+2	; 0x02
 876:	93 81       	ldd	r25, Z+3	; 0x03
 878:	00 97       	sbiw	r24, 0x00	; 0
 87a:	09 f1       	breq	.+66     	; 0x8be <unlock+0x4e>

	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 87c:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <readyQ>
 880:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <readyQ+0x1>
 884:	10 97       	sbiw	r26, 0x00	; 0
 886:	f9 f0       	breq	.+62     	; 0x8c6 <unlock+0x56>
		*queue = p;
	} else {
		thread q = *queue;
		thread m = q->next; 
 888:	14 96       	adiw	r26, 0x04	; 4
 88a:	0d 90       	ld	r0, X+
 88c:	bc 91       	ld	r27, X
 88e:	a0 2d       	mov	r26, r0
		p = q->next;
		p->next = m;
 890:	0a 2e       	mov	r0, r26
 892:	1b 2e       	mov	r1, r27
 894:	15 96       	adiw	r26, 0x05	; 5
 896:	1c 92       	st	X, r1
 898:	0e 92       	st	-X, r0
 89a:	11 24       	eor	r1, r1
 89c:	14 97       	sbiw	r26, 0x04	; 4
 89e:	82 81       	ldd	r24, Z+2	; 0x02
 8a0:	93 81       	ldd	r25, Z+3	; 0x03
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
 8a2:	00 97       	sbiw	r24, 0x00	; 0
 8a4:	59 f0       	breq	.+22     	; 0x8bc <unlock+0x4c>
		*queue = (*queue)->next;
 8a6:	dc 01       	movw	r26, r24
 8a8:	14 96       	adiw	r26, 0x04	; 4
 8aa:	2d 91       	ld	r18, X+
 8ac:	3c 91       	ld	r19, X
 8ae:	15 97       	sbiw	r26, 0x05	; 5
 8b0:	33 83       	std	Z+3, r19	; 0x03
 8b2:	22 83       	std	Z+2, r18	; 0x02
	DISABLE();
	if (m->waitQ == NULL){
		m->locked = 0;
		} else {
		enqueue(current,&readyQ);
		dispatch(dequeue(&m->waitQ));
 8b4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <dispatch>
	}
	ENABLE();
 8b8:	78 94       	sei
 8ba:	08 95       	ret
 8bc:	ff cf       	rjmp	.-2      	; 0x8bc <unlock+0x4c>
}

void unlock(mutex *m) {
	DISABLE();
	if (m->waitQ == NULL){
		m->locked = 0;
 8be:	11 82       	std	Z+1, r1	; 0x01
 8c0:	10 82       	st	Z, r1
		} else {
		enqueue(current,&readyQ);
		dispatch(dequeue(&m->waitQ));
	}
	ENABLE();
 8c2:	78 94       	sei
 8c4:	08 95       	ret
	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
		*queue = p;
 8c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 8ca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 8ce:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <readyQ+0x1>
 8d2:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <readyQ>
 8d6:	e7 cf       	rjmp	.-50     	; 0x8a6 <unlock+0x36>

000008d8 <__vector_3>:
		dispatch(dequeue(&m->waitQ));
	}
	ENABLE();
}

ISR(PCINT1_vect){
 8d8:	1f 92       	push	r1
 8da:	0f 92       	push	r0
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	0f 92       	push	r0
 8e0:	11 24       	eor	r1, r1
 8e2:	2f 93       	push	r18
 8e4:	3f 93       	push	r19
 8e6:	4f 93       	push	r20
 8e8:	5f 93       	push	r21
 8ea:	6f 93       	push	r22
 8ec:	7f 93       	push	r23
 8ee:	8f 93       	push	r24
 8f0:	9f 93       	push	r25
 8f2:	af 93       	push	r26
 8f4:	bf 93       	push	r27
 8f6:	ef 93       	push	r30
 8f8:	ff 93       	push	r31
	i = PINB & 0x80;
 8fa:	83 b1       	in	r24, 0x03	; 3
 8fc:	80 78       	andi	r24, 0x80	; 128
 8fe:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <i>
	if (i != 0x80) {
 902:	80 38       	cpi	r24, 0x80	; 128
 904:	31 f0       	breq	.+12     	; 0x912 <__vector_3+0x3a>
		unlock(&but);
 906:	86 e0       	ldi	r24, 0x06	; 6
 908:	91 e0       	ldi	r25, 0x01	; 1
 90a:	0e 94 38 04 	call	0x870	; 0x870 <unlock>
		yield();
 90e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <yield>
	}
}
 912:	ff 91       	pop	r31
 914:	ef 91       	pop	r30
 916:	bf 91       	pop	r27
 918:	af 91       	pop	r26
 91a:	9f 91       	pop	r25
 91c:	8f 91       	pop	r24
 91e:	7f 91       	pop	r23
 920:	6f 91       	pop	r22
 922:	5f 91       	pop	r21
 924:	4f 91       	pop	r20
 926:	3f 91       	pop	r19
 928:	2f 91       	pop	r18
 92a:	0f 90       	pop	r0
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	0f 90       	pop	r0
 930:	1f 90       	pop	r1
 932:	18 95       	reti

00000934 <__fixsfsi>:
 934:	0e 94 a1 04 	call	0x942	; 0x942 <__fixunssfsi>
 938:	68 94       	set
 93a:	b1 11       	cpse	r27, r1
 93c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 940:	08 95       	ret

00000942 <__fixunssfsi>:
 942:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_splitA>
 946:	88 f0       	brcs	.+34     	; 0x96a <__fixunssfsi+0x28>
 948:	9f 57       	subi	r25, 0x7F	; 127
 94a:	98 f0       	brcs	.+38     	; 0x972 <__fixunssfsi+0x30>
 94c:	b9 2f       	mov	r27, r25
 94e:	99 27       	eor	r25, r25
 950:	b7 51       	subi	r27, 0x17	; 23
 952:	b0 f0       	brcs	.+44     	; 0x980 <__fixunssfsi+0x3e>
 954:	e1 f0       	breq	.+56     	; 0x98e <__fixunssfsi+0x4c>
 956:	66 0f       	add	r22, r22
 958:	77 1f       	adc	r23, r23
 95a:	88 1f       	adc	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	1a f0       	brmi	.+6      	; 0x966 <__fixunssfsi+0x24>
 960:	ba 95       	dec	r27
 962:	c9 f7       	brne	.-14     	; 0x956 <__fixunssfsi+0x14>
 964:	14 c0       	rjmp	.+40     	; 0x98e <__fixunssfsi+0x4c>
 966:	b1 30       	cpi	r27, 0x01	; 1
 968:	91 f0       	breq	.+36     	; 0x98e <__fixunssfsi+0x4c>
 96a:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_zero>
 96e:	b1 e0       	ldi	r27, 0x01	; 1
 970:	08 95       	ret
 972:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_zero>
 976:	67 2f       	mov	r22, r23
 978:	78 2f       	mov	r23, r24
 97a:	88 27       	eor	r24, r24
 97c:	b8 5f       	subi	r27, 0xF8	; 248
 97e:	39 f0       	breq	.+14     	; 0x98e <__fixunssfsi+0x4c>
 980:	b9 3f       	cpi	r27, 0xF9	; 249
 982:	cc f3       	brlt	.-14     	; 0x976 <__fixunssfsi+0x34>
 984:	86 95       	lsr	r24
 986:	77 95       	ror	r23
 988:	67 95       	ror	r22
 98a:	b3 95       	inc	r27
 98c:	d9 f7       	brne	.-10     	; 0x984 <__fixunssfsi+0x42>
 98e:	3e f4       	brtc	.+14     	; 0x99e <__fixunssfsi+0x5c>
 990:	90 95       	com	r25
 992:	80 95       	com	r24
 994:	70 95       	com	r23
 996:	61 95       	neg	r22
 998:	7f 4f       	sbci	r23, 0xFF	; 255
 99a:	8f 4f       	sbci	r24, 0xFF	; 255
 99c:	9f 4f       	sbci	r25, 0xFF	; 255
 99e:	08 95       	ret

000009a0 <__floatunsisf>:
 9a0:	e8 94       	clt
 9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <__floatsisf+0x12>

000009a4 <__floatsisf>:
 9a4:	97 fb       	bst	r25, 7
 9a6:	3e f4       	brtc	.+14     	; 0x9b6 <__floatsisf+0x12>
 9a8:	90 95       	com	r25
 9aa:	80 95       	com	r24
 9ac:	70 95       	com	r23
 9ae:	61 95       	neg	r22
 9b0:	7f 4f       	sbci	r23, 0xFF	; 255
 9b2:	8f 4f       	sbci	r24, 0xFF	; 255
 9b4:	9f 4f       	sbci	r25, 0xFF	; 255
 9b6:	99 23       	and	r25, r25
 9b8:	a9 f0       	breq	.+42     	; 0x9e4 <__floatsisf+0x40>
 9ba:	f9 2f       	mov	r31, r25
 9bc:	96 e9       	ldi	r25, 0x96	; 150
 9be:	bb 27       	eor	r27, r27
 9c0:	93 95       	inc	r25
 9c2:	f6 95       	lsr	r31
 9c4:	87 95       	ror	r24
 9c6:	77 95       	ror	r23
 9c8:	67 95       	ror	r22
 9ca:	b7 95       	ror	r27
 9cc:	f1 11       	cpse	r31, r1
 9ce:	f8 cf       	rjmp	.-16     	; 0x9c0 <__floatsisf+0x1c>
 9d0:	fa f4       	brpl	.+62     	; 0xa10 <__floatsisf+0x6c>
 9d2:	bb 0f       	add	r27, r27
 9d4:	11 f4       	brne	.+4      	; 0x9da <__floatsisf+0x36>
 9d6:	60 ff       	sbrs	r22, 0
 9d8:	1b c0       	rjmp	.+54     	; 0xa10 <__floatsisf+0x6c>
 9da:	6f 5f       	subi	r22, 0xFF	; 255
 9dc:	7f 4f       	sbci	r23, 0xFF	; 255
 9de:	8f 4f       	sbci	r24, 0xFF	; 255
 9e0:	9f 4f       	sbci	r25, 0xFF	; 255
 9e2:	16 c0       	rjmp	.+44     	; 0xa10 <__floatsisf+0x6c>
 9e4:	88 23       	and	r24, r24
 9e6:	11 f0       	breq	.+4      	; 0x9ec <__floatsisf+0x48>
 9e8:	96 e9       	ldi	r25, 0x96	; 150
 9ea:	11 c0       	rjmp	.+34     	; 0xa0e <__floatsisf+0x6a>
 9ec:	77 23       	and	r23, r23
 9ee:	21 f0       	breq	.+8      	; 0x9f8 <__floatsisf+0x54>
 9f0:	9e e8       	ldi	r25, 0x8E	; 142
 9f2:	87 2f       	mov	r24, r23
 9f4:	76 2f       	mov	r23, r22
 9f6:	05 c0       	rjmp	.+10     	; 0xa02 <__floatsisf+0x5e>
 9f8:	66 23       	and	r22, r22
 9fa:	71 f0       	breq	.+28     	; 0xa18 <__floatsisf+0x74>
 9fc:	96 e8       	ldi	r25, 0x86	; 134
 9fe:	86 2f       	mov	r24, r22
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	2a f0       	brmi	.+10     	; 0xa10 <__floatsisf+0x6c>
 a06:	9a 95       	dec	r25
 a08:	66 0f       	add	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	da f7       	brpl	.-10     	; 0xa06 <__floatsisf+0x62>
 a10:	88 0f       	add	r24, r24
 a12:	96 95       	lsr	r25
 a14:	87 95       	ror	r24
 a16:	97 f9       	bld	r25, 7
 a18:	08 95       	ret

00000a1a <floor>:
 a1a:	0e 94 6f 05 	call	0xade	; 0xade <__fp_trunc>
 a1e:	90 f0       	brcs	.+36     	; 0xa44 <floor+0x2a>
 a20:	9f 37       	cpi	r25, 0x7F	; 127
 a22:	48 f4       	brcc	.+18     	; 0xa36 <floor+0x1c>
 a24:	91 11       	cpse	r25, r1
 a26:	16 f0       	brts	.+4      	; 0xa2c <floor+0x12>
 a28:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 a2c:	60 e0       	ldi	r22, 0x00	; 0
 a2e:	70 e0       	ldi	r23, 0x00	; 0
 a30:	80 e8       	ldi	r24, 0x80	; 128
 a32:	9f eb       	ldi	r25, 0xBF	; 191
 a34:	08 95       	ret
 a36:	26 f4       	brtc	.+8      	; 0xa40 <floor+0x26>
 a38:	1b 16       	cp	r1, r27
 a3a:	61 1d       	adc	r22, r1
 a3c:	71 1d       	adc	r23, r1
 a3e:	81 1d       	adc	r24, r1
 a40:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_mintl>
 a44:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_mpack>

00000a48 <__fp_mintl>:
 a48:	88 23       	and	r24, r24
 a4a:	71 f4       	brne	.+28     	; 0xa68 <__fp_mintl+0x20>
 a4c:	77 23       	and	r23, r23
 a4e:	21 f0       	breq	.+8      	; 0xa58 <__fp_mintl+0x10>
 a50:	98 50       	subi	r25, 0x08	; 8
 a52:	87 2b       	or	r24, r23
 a54:	76 2f       	mov	r23, r22
 a56:	07 c0       	rjmp	.+14     	; 0xa66 <__fp_mintl+0x1e>
 a58:	66 23       	and	r22, r22
 a5a:	11 f4       	brne	.+4      	; 0xa60 <__fp_mintl+0x18>
 a5c:	99 27       	eor	r25, r25
 a5e:	0d c0       	rjmp	.+26     	; 0xa7a <__fp_mintl+0x32>
 a60:	90 51       	subi	r25, 0x10	; 16
 a62:	86 2b       	or	r24, r22
 a64:	70 e0       	ldi	r23, 0x00	; 0
 a66:	60 e0       	ldi	r22, 0x00	; 0
 a68:	2a f0       	brmi	.+10     	; 0xa74 <__fp_mintl+0x2c>
 a6a:	9a 95       	dec	r25
 a6c:	66 0f       	add	r22, r22
 a6e:	77 1f       	adc	r23, r23
 a70:	88 1f       	adc	r24, r24
 a72:	da f7       	brpl	.-10     	; 0xa6a <__fp_mintl+0x22>
 a74:	88 0f       	add	r24, r24
 a76:	96 95       	lsr	r25
 a78:	87 95       	ror	r24
 a7a:	97 f9       	bld	r25, 7
 a7c:	08 95       	ret

00000a7e <__fp_mpack>:
 a7e:	9f 3f       	cpi	r25, 0xFF	; 255
 a80:	31 f0       	breq	.+12     	; 0xa8e <__fp_mpack_finite+0xc>

00000a82 <__fp_mpack_finite>:
 a82:	91 50       	subi	r25, 0x01	; 1
 a84:	20 f4       	brcc	.+8      	; 0xa8e <__fp_mpack_finite+0xc>
 a86:	87 95       	ror	r24
 a88:	77 95       	ror	r23
 a8a:	67 95       	ror	r22
 a8c:	b7 95       	ror	r27
 a8e:	88 0f       	add	r24, r24
 a90:	91 1d       	adc	r25, r1
 a92:	96 95       	lsr	r25
 a94:	87 95       	ror	r24
 a96:	97 f9       	bld	r25, 7
 a98:	08 95       	ret

00000a9a <__fp_split3>:
 a9a:	57 fd       	sbrc	r21, 7
 a9c:	90 58       	subi	r25, 0x80	; 128
 a9e:	44 0f       	add	r20, r20
 aa0:	55 1f       	adc	r21, r21
 aa2:	59 f0       	breq	.+22     	; 0xaba <__fp_splitA+0x10>
 aa4:	5f 3f       	cpi	r21, 0xFF	; 255
 aa6:	71 f0       	breq	.+28     	; 0xac4 <__fp_splitA+0x1a>
 aa8:	47 95       	ror	r20

00000aaa <__fp_splitA>:
 aaa:	88 0f       	add	r24, r24
 aac:	97 fb       	bst	r25, 7
 aae:	99 1f       	adc	r25, r25
 ab0:	61 f0       	breq	.+24     	; 0xaca <__fp_splitA+0x20>
 ab2:	9f 3f       	cpi	r25, 0xFF	; 255
 ab4:	79 f0       	breq	.+30     	; 0xad4 <__fp_splitA+0x2a>
 ab6:	87 95       	ror	r24
 ab8:	08 95       	ret
 aba:	12 16       	cp	r1, r18
 abc:	13 06       	cpc	r1, r19
 abe:	14 06       	cpc	r1, r20
 ac0:	55 1f       	adc	r21, r21
 ac2:	f2 cf       	rjmp	.-28     	; 0xaa8 <__fp_split3+0xe>
 ac4:	46 95       	lsr	r20
 ac6:	f1 df       	rcall	.-30     	; 0xaaa <__fp_splitA>
 ac8:	08 c0       	rjmp	.+16     	; 0xada <__fp_splitA+0x30>
 aca:	16 16       	cp	r1, r22
 acc:	17 06       	cpc	r1, r23
 ace:	18 06       	cpc	r1, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	f1 cf       	rjmp	.-30     	; 0xab6 <__fp_splitA+0xc>
 ad4:	86 95       	lsr	r24
 ad6:	71 05       	cpc	r23, r1
 ad8:	61 05       	cpc	r22, r1
 ada:	08 94       	sec
 adc:	08 95       	ret

00000ade <__fp_trunc>:
 ade:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_splitA>
 ae2:	a0 f0       	brcs	.+40     	; 0xb0c <__fp_trunc+0x2e>
 ae4:	be e7       	ldi	r27, 0x7E	; 126
 ae6:	b9 17       	cp	r27, r25
 ae8:	88 f4       	brcc	.+34     	; 0xb0c <__fp_trunc+0x2e>
 aea:	bb 27       	eor	r27, r27
 aec:	9f 38       	cpi	r25, 0x8F	; 143
 aee:	60 f4       	brcc	.+24     	; 0xb08 <__fp_trunc+0x2a>
 af0:	16 16       	cp	r1, r22
 af2:	b1 1d       	adc	r27, r1
 af4:	67 2f       	mov	r22, r23
 af6:	78 2f       	mov	r23, r24
 af8:	88 27       	eor	r24, r24
 afa:	98 5f       	subi	r25, 0xF8	; 248
 afc:	f7 cf       	rjmp	.-18     	; 0xaec <__fp_trunc+0xe>
 afe:	86 95       	lsr	r24
 b00:	77 95       	ror	r23
 b02:	67 95       	ror	r22
 b04:	b1 1d       	adc	r27, r1
 b06:	93 95       	inc	r25
 b08:	96 39       	cpi	r25, 0x96	; 150
 b0a:	c8 f3       	brcs	.-14     	; 0xafe <__fp_trunc+0x20>
 b0c:	08 95       	ret

00000b0e <__fp_zero>:
 b0e:	e8 94       	clt

00000b10 <__fp_szero>:
 b10:	bb 27       	eor	r27, r27
 b12:	66 27       	eor	r22, r22
 b14:	77 27       	eor	r23, r23
 b16:	cb 01       	movw	r24, r22
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret

00000b1c <__divmodsi4>:
 b1c:	05 2e       	mov	r0, r21
 b1e:	97 fb       	bst	r25, 7
 b20:	1e f4       	brtc	.+6      	; 0xb28 <__divmodsi4+0xc>
 b22:	00 94       	com	r0
 b24:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__negsi2>
 b28:	57 fd       	sbrc	r21, 7
 b2a:	07 d0       	rcall	.+14     	; 0xb3a <__divmodsi4_neg2>
 b2c:	0e 94 b3 05 	call	0xb66	; 0xb66 <__udivmodsi4>
 b30:	07 fc       	sbrc	r0, 7
 b32:	03 d0       	rcall	.+6      	; 0xb3a <__divmodsi4_neg2>
 b34:	4e f4       	brtc	.+18     	; 0xb48 <__divmodsi4_exit>
 b36:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__negsi2>

00000b3a <__divmodsi4_neg2>:
 b3a:	50 95       	com	r21
 b3c:	40 95       	com	r20
 b3e:	30 95       	com	r19
 b40:	21 95       	neg	r18
 b42:	3f 4f       	sbci	r19, 0xFF	; 255
 b44:	4f 4f       	sbci	r20, 0xFF	; 255
 b46:	5f 4f       	sbci	r21, 0xFF	; 255

00000b48 <__divmodsi4_exit>:
 b48:	08 95       	ret

00000b4a <__negsi2>:
 b4a:	90 95       	com	r25
 b4c:	80 95       	com	r24
 b4e:	70 95       	com	r23
 b50:	61 95       	neg	r22
 b52:	7f 4f       	sbci	r23, 0xFF	; 255
 b54:	8f 4f       	sbci	r24, 0xFF	; 255
 b56:	9f 4f       	sbci	r25, 0xFF	; 255
 b58:	08 95       	ret

00000b5a <__tablejump2__>:
 b5a:	ee 0f       	add	r30, r30
 b5c:	ff 1f       	adc	r31, r31
 b5e:	05 90       	lpm	r0, Z+
 b60:	f4 91       	lpm	r31, Z
 b62:	e0 2d       	mov	r30, r0
 b64:	09 94       	ijmp

00000b66 <__udivmodsi4>:
 b66:	a1 e2       	ldi	r26, 0x21	; 33
 b68:	1a 2e       	mov	r1, r26
 b6a:	aa 1b       	sub	r26, r26
 b6c:	bb 1b       	sub	r27, r27
 b6e:	fd 01       	movw	r30, r26
 b70:	0d c0       	rjmp	.+26     	; 0xb8c <__udivmodsi4_ep>

00000b72 <__udivmodsi4_loop>:
 b72:	aa 1f       	adc	r26, r26
 b74:	bb 1f       	adc	r27, r27
 b76:	ee 1f       	adc	r30, r30
 b78:	ff 1f       	adc	r31, r31
 b7a:	a2 17       	cp	r26, r18
 b7c:	b3 07       	cpc	r27, r19
 b7e:	e4 07       	cpc	r30, r20
 b80:	f5 07       	cpc	r31, r21
 b82:	20 f0       	brcs	.+8      	; 0xb8c <__udivmodsi4_ep>
 b84:	a2 1b       	sub	r26, r18
 b86:	b3 0b       	sbc	r27, r19
 b88:	e4 0b       	sbc	r30, r20
 b8a:	f5 0b       	sbc	r31, r21

00000b8c <__udivmodsi4_ep>:
 b8c:	66 1f       	adc	r22, r22
 b8e:	77 1f       	adc	r23, r23
 b90:	88 1f       	adc	r24, r24
 b92:	99 1f       	adc	r25, r25
 b94:	1a 94       	dec	r1
 b96:	69 f7       	brne	.-38     	; 0xb72 <__udivmodsi4_loop>
 b98:	60 95       	com	r22
 b9a:	70 95       	com	r23
 b9c:	80 95       	com	r24
 b9e:	90 95       	com	r25
 ba0:	9b 01       	movw	r18, r22
 ba2:	ac 01       	movw	r20, r24
 ba4:	bd 01       	movw	r22, r26
 ba6:	cf 01       	movw	r24, r30
 ba8:	08 95       	ret

00000baa <setjmp>:
 baa:	dc 01       	movw	r26, r24
 bac:	2d 92       	st	X+, r2
 bae:	3d 92       	st	X+, r3
 bb0:	4d 92       	st	X+, r4
 bb2:	5d 92       	st	X+, r5
 bb4:	6d 92       	st	X+, r6
 bb6:	7d 92       	st	X+, r7
 bb8:	8d 92       	st	X+, r8
 bba:	9d 92       	st	X+, r9
 bbc:	ad 92       	st	X+, r10
 bbe:	bd 92       	st	X+, r11
 bc0:	cd 92       	st	X+, r12
 bc2:	dd 92       	st	X+, r13
 bc4:	ed 92       	st	X+, r14
 bc6:	fd 92       	st	X+, r15
 bc8:	0d 93       	st	X+, r16
 bca:	1d 93       	st	X+, r17
 bcc:	cd 93       	st	X+, r28
 bce:	dd 93       	st	X+, r29
 bd0:	ff 91       	pop	r31
 bd2:	ef 91       	pop	r30
 bd4:	8d b7       	in	r24, 0x3d	; 61
 bd6:	8d 93       	st	X+, r24
 bd8:	8e b7       	in	r24, 0x3e	; 62
 bda:	8d 93       	st	X+, r24
 bdc:	8f b7       	in	r24, 0x3f	; 63
 bde:	8d 93       	st	X+, r24
 be0:	ed 93       	st	X+, r30
 be2:	fd 93       	st	X+, r31
 be4:	88 27       	eor	r24, r24
 be6:	99 27       	eor	r25, r25
 be8:	09 94       	ijmp

00000bea <longjmp>:
 bea:	dc 01       	movw	r26, r24
 bec:	cb 01       	movw	r24, r22
 bee:	81 30       	cpi	r24, 0x01	; 1
 bf0:	91 05       	cpc	r25, r1
 bf2:	81 1d       	adc	r24, r1
 bf4:	2d 90       	ld	r2, X+
 bf6:	3d 90       	ld	r3, X+
 bf8:	4d 90       	ld	r4, X+
 bfa:	5d 90       	ld	r5, X+
 bfc:	6d 90       	ld	r6, X+
 bfe:	7d 90       	ld	r7, X+
 c00:	8d 90       	ld	r8, X+
 c02:	9d 90       	ld	r9, X+
 c04:	ad 90       	ld	r10, X+
 c06:	bd 90       	ld	r11, X+
 c08:	cd 90       	ld	r12, X+
 c0a:	dd 90       	ld	r13, X+
 c0c:	ed 90       	ld	r14, X+
 c0e:	fd 90       	ld	r15, X+
 c10:	0d 91       	ld	r16, X+
 c12:	1d 91       	ld	r17, X+
 c14:	cd 91       	ld	r28, X+
 c16:	dd 91       	ld	r29, X+
 c18:	ed 91       	ld	r30, X+
 c1a:	fd 91       	ld	r31, X+
 c1c:	0d 90       	ld	r0, X+
 c1e:	f8 94       	cli
 c20:	fe bf       	out	0x3e, r31	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	ed bf       	out	0x3d, r30	; 61
 c26:	ed 91       	ld	r30, X+
 c28:	fd 91       	ld	r31, X+
 c2a:	09 94       	ijmp

00000c2c <_exit>:
 c2c:	f8 94       	cli

00000c2e <__stop_program>:
 c2e:	ff cf       	rjmp	.-2      	; 0xc2e <__stop_program>
